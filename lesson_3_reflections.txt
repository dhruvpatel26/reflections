When would you want to create remote repository rather than keeping all your work local?
  Creating a remote repository is useful when you have multiple people working on the same project and need each other to
  instantly see the changes of one another's additions/suggestions to the project.
  
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your 
remote repository?
You always want to pull changes manually so that you can have more control over it. Sometimes you may not need to pull changes
to your local repository and just want the commit on the remote repository, because it may not be that important.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Fork is just like cloning in which you copy the contents of someone else's  repository. You might want to fork it if you are using someone else's work/program to create it in your own version. This way you give credit to the person whose work it originally was. Also, more often than not you won't have the permission to change the contents of the original program. 
You would clone a repository when you would like to copy an entire repository from one computer to another. Meaning, when you are copying it from github to your local computer, whereas forking creates a copy of it on your own github account as a new repository.
Branches are something you would create if you want to work on a different version of the program while keeping the original one the same. Also, sharing those branches with others and allowing them to work on it as well.

What is the benefit of having a copy of the last known state of the remote stored locally?
So, that you can combine it locally with your other files and push those changes back to remote

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
I would probably be communicating through email, live chat and maybe even skype and sending files/folders back and forth to stay up to date. The easier thing would be that I won't have to learn a version control system like git and github because I already know how to communicate through email live chat and skype. The hard part would be that all the project members would most likely need to be available at the same time rather than having freedom to work independently on our own.
